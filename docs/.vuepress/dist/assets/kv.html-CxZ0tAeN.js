import{_ as s,c as a,a as e,o as t}from"./app-CTIoDS1N.js";const p={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="kv-存储" tabindex="-1"><a class="header-anchor" href="#kv-存储"><span>KV 存储</span></a></h1><p>一个基于 <code>mmap</code> 实现的 <code>KV</code> 存储，与 <code>MMKV</code>/<code>SP</code>/<code>Jetpack DataStore</code> 不同的是，它不会把全部数据加载到内存，因而可以支持大量 <code>KV</code> 的存储与读取。</p><h2 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入"><span>依赖引入</span></a></h2><div class="language-kts line-numbers-mode" data-highlighter="prismjs" data-ext="kts" data-title="kts"><pre><code><span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;cn.qhplus.emo:kv&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="限制" tabindex="-1"><a class="header-anchor" href="#限制"><span>限制</span></a></h3><ol><li><code>key</code> 的 <code>byte</code> 长度小于 256。</li><li><code>value</code> 的 <code>byte</code> 长度小于 65536，如果大于这个，推荐用文件存储，然后 <code>kv</code> 里只存储文件路径。</li><li>只支持单进程使用。</li></ol><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化"><span>实例化</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">    <span class="token keyword">val</span> singleInstance <span class="token operator">=</span> <span class="token function">EmoKv</span><span class="token punctuation">(</span></span>
<span class="line">        context<span class="token punctuation">,</span> </span>
<span class="line">        name， <span class="token comment">// 运行期间应该唯一</span></span>
<span class="line">        crc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否给 value 加上 crc 32,  默认 true</span></span>
<span class="line">        compress<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否压缩 value， 默认 true</span></span>
<span class="line">        compressMiniLen<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment">// 如果开启压缩，value 长度大于 compressMiniLen 才压缩，默认 500</span></span>
<span class="line">        indexInitSpace<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">16384</span><span class="token punctuation">,</span> <span class="token comment">// 索引的 mmap 初始长度，默认 16k, 在 0.75 的加载因子下可存储 600 个 kv .</span></span>
<span class="line">        keyInitSpace<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token comment">// key 的 mmap 初始长度，默认 4k</span></span>
<span class="line">        valueInitSpace<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// value 的 mmap 初始长度，默认 1m</span></span>
<span class="line">        hashFactor<span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token comment">// hash 索引加载因子</span></span>
<span class="line">        valueUpdateCountToAutoCompact<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token comment">// 超过这个的写入次数，则触发 value 文件压缩</span></span>
<span class="line">        validateFailedReporter<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token operator">:</span> ByteArray<span class="token punctuation">,</span> e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Boolean<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 校验失败的回调</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入" tabindex="-1"><a class="header-anchor" href="#写入"><span>写入</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bool&quot;</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;char&quot;</span></span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;short&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;int&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;long&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;float&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;double&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;string&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;hello world&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 上述都只是这个方法的便携重载</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bytearray&quot;</span></span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;bytearray&quot;</span></span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取" tabindex="-1"><a class="header-anchor" href="#读取"><span>读取</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bool&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getChar</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;char&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getShort</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;short&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;int&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;long&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;float&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;double&quot;</span></span><span class="token punctuation">,</span> defalut <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">)</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;string&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 上述都只是这个方法的便携重载</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bytearray&quot;</span></span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="压缩-value" tabindex="-1"><a class="header-anchor" href="#压缩-value"><span>压缩 Value</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token comment">// 因为采用追加写的方式，反复写入同一个 key，会造成有多个无用 value 存在于文件中的情况</span></span>
<span class="line"><span class="token comment">// 一般不需要开发者调用这个方法，而是通过配置 valueUpdateCountToAutoCompact</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭" tabindex="-1"><a class="header-anchor" href="#关闭"><span>关闭</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token comment">// 注： 因为关闭会涉及资源释放，最好在子线程调用。</span></span>
<span class="line">singleInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现原理与对比" tabindex="-1"><a class="header-anchor" href="#实现原理与对比"><span>实现原理与对比</span></a></h3><p>可查看公众号文章 <a href="https://mp.weixin.qq.com/s?__biz=Mzk0OTMzMjE2OQ==&amp;mid=2247483990&amp;idx=1&amp;sn=8c8cdcd39bae07c8f13b852ed50a44da&amp;chksm=c358b3f0f42f3ae6a2ca8f53fffb6310b330fc05bc74e6d278e3491af7689a018bc4ec3d5870&amp;token=705170082&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">KV 存储那些事儿</a>~</p>`,21)]))}const i=s(p,[["render",l],["__file","kv.html.vue"]]),u=JSON.parse('{"path":"/guide/kv.html","title":"KV 存储","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"依赖引入","slug":"依赖引入","link":"#依赖引入","children":[{"level":3,"title":"限制","slug":"限制","link":"#限制","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"实例化","slug":"实例化","link":"#实例化","children":[]},{"level":3,"title":"写入","slug":"写入","link":"#写入","children":[]},{"level":3,"title":"读取","slug":"读取","link":"#读取","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":3,"title":"压缩 Value","slug":"压缩-value","link":"#压缩-value","children":[]},{"level":3,"title":"关闭","slug":"关闭","link":"#关闭","children":[]},{"level":3,"title":"实现原理与对比","slug":"实现原理与对比","link":"#实现原理与对比","children":[]}]}],"git":{"updatedTime":1692869469000,"contributors":[{"name":"cgspine","email":"cgspine@gmail.com","commits":8}]},"filePathRelative":"guide/kv.md"}');export{i as comp,u as data};
