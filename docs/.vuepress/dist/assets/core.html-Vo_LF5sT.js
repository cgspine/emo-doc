import{_ as t,r as c,o as p,c as l,b as n,d as s,e,a as o}from"./app-YivrfQD0.js";const i={},r=o(`<h1 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> core</h1><h2 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h2><div class="language-kts line-numbers-mode" data-ext="kts"><pre class="language-kts"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;cn.qhplus.emo:core&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="emoconfig" tabindex="-1"><a class="header-anchor" href="#emoconfig" aria-hidden="true">#</a> EmoConfig</h2><p>用于提供 <code>emo</code> 组件的通用配置项，当前只有 <code>debug</code> 属性。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 建议在 Application.onCreate 里调用</span>
EmoConfig<span class="token punctuation">.</span>debug <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>DEBUG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),u=n("code",null,"BuildConfig",-1),d=n("code",null,"BuildConfig",-1),k={href:"https://blog.dipien.com/stop-generating-the-buildconfig-on-your-android-modules-7d82dd7f20f1",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="emolog" tabindex="-1"><a class="header-anchor" href="#emolog" aria-hidden="true">#</a> EmoLog</h2><p><code>EmoLog</code> 是提供开发者接收 <code>emo</code> 各个组件的日志信息，方便开发者们发现并调试 <code>emo</code> 组件的相关问题。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 建议在 Application.onCreate 里调用</span>
<span class="token comment">// 默认情况调用系统的 Log</span>
EmoLog<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> EmoLogDelegate <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> throwable<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">w</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> throwable<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">i</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> throwable<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">d</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> throwable<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="emobus" tabindex="-1"><a class="header-anchor" href="#emobus" aria-hidden="true">#</a> EmoBus</h2><p><code>EmoBus</code> 是基于 <code>SharedFlow</code> 的 <code>EventBus</code> 实现。可以用于消息通知、跨页面数据传递等。</p><ol><li>定义消息</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@EmoEventProp</span><span class="token punctuation">(</span>
    <span class="token comment">// 是否是 sticky 事件， 默认为 false</span>
    sticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
    <span class="token comment">// emo 是每个事件类型一个 channel，如果长时间没使用这个 channel， 是否要释放？默认 fasle 表示释放</span>
    keepChannelAlive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
     <span class="token comment">// extraBufferCapacity 与 onBufferOverflow 配合使用，为了处理背压问题</span>
    extraBufferCapacity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token comment">// 当消息产生速度大于消耗速度时，默认 drop 掉旧的还没消耗的消息</span>
    onBufferOverflow <span class="token operator">=</span> BufferOverflow<span class="token punctuation">.</span>DROP_OLDEST 
<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token function">CustomEvent</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>发送消息</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 此方法在 suspend 方法调用，也可以使用 emitNonSuspend 在非 suspend 环境调用</span>
EmoBus<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">CustomEvent</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>接收消息</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>EmoBus<span class="token punctuation">.</span>default<span class="token punctuation">.</span>flowOf<span class="token operator">&lt;</span>CustomEvent<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectLatest</span> <span class="token punctuation">{</span> event <span class="token operator">-&gt;</span>
    <span class="token comment">// 消耗消息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为直接提供了 <code>SharedFlow</code> 接口，所以可以用借助 <code>repeatOnLifecycle</code> 等处理界面生命周期相关的问题，不需要 <code>emo</code> 提供过多的接口。</p>`,12),v={href:"https://mp.weixin.qq.com/s?__biz=Mzk0OTMzMjE2OQ==&mid=2247483900&idx=1&sn=11652a23af444d241788b2da929e65ad&chksm=c358b05af42f394ca9f563d2c79b0369cbe0c02667641bb0789553908ecafe445e82099539a3&token=1864276121&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},b=o(`<h2 id="concurrencyshare" tabindex="-1"><a class="header-anchor" href="#concurrencyshare" aria-hidden="true">#</a> ConcurrencyShare</h2><p>思考一个场景：我们三个界面都需要发送网络请求请求一份基础信息，如果每个界面都单独发送网络请求，那么我依次进入三个界面，同样的请求就会发送三次，而实际上可能第一个界面的请求结果还没回来，实际上后面的两个界面只需要等待并复用第一个界面的请求结果就好。 这便是 <code>ConcurrencyShare</code> 存在的意义。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>
<span class="token comment">// 你也可以通过 \`ConcurrencyShare.globalInstance\` 使用全局的实例</span>
<span class="token keyword">val</span> concurrencyShare <span class="token operator">=</span> <span class="token function">ConcurrencyShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 如果已经有协程开启了任务，那么此协程等待结果就好</span>
<span class="token comment">// 否则才开始执行耗时任务</span>
concurrencyShare<span class="token punctuation">.</span><span class="token function">joinPreviousOrRun</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 耗时任务</span>
<span class="token punctuation">}</span>

<span class="token comment">// 如果已经有协程开启了任务，那就取消它，然后重新跑</span>
<span class="token comment">// 例如根据用户输入后台更新某些信息，就要以最新输入为准，否则反而会产生多线程问题。</span>
concurrencyShare<span class="token punctuation">.</span><span class="token function">cancelPreviousThenRun</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 耗时任务</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h={href:"https://mp.weixin.qq.com/s?__biz=Mzk0OTMzMjE2OQ==&mid=2247483845&idx=1&sn=9799ac2aabd302b382fc8f393d9901f8&chksm=c358b063f42f39752602746340836411a6af9479c4ae4a350f38ce054b7a3a8b59b35e144e04&token=1864276121&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"};function g(f,_){const a=c("ExternalLinkIcon");return p(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("emo 组件都默认关闭了 "),u,s(" 的输出，所以你不会一搜索 "),d,s(" 就出现一堆无用的同名类，更多可看 "),n("a",k,[s("stop-generating-the-buildconfig-on-your-android-modules"),e(a)])])]),m,n("blockquote",null,[n("p",null,[s("更多信息可查看公众号文章 "),n("a",v,[s("用 SharedFlow 包装个 EventBus"),e(a)])])]),b,n("blockquote",null,[n("p",null,[s("更多信息可查看公众号文章 "),n("a",h,[s("明明请求的数据是最新的，为啥渲染出来的是旧数据？"),e(a)])])])])}const y=t(i,[["render",g],["__file","core.html.vue"]]);export{y as default};
