import{_ as n,o as a,c as s,a as e}from"./app-YivrfQD0.js";const t={},o=e(`<h1 id="网络状态" tabindex="-1"><a class="header-anchor" href="#网络状态" aria-hidden="true">#</a> 网络状态</h1><p>目前大多数的网络状态变更，还是依赖于 <code>Broadcast</code>, 但官方其实很早就废除了 <code>ConnectivityCallback</code> 的方式。因此，<code>emo</code> 提供的方式就是采用这种新的方式。此外还添加了很弱的流量监控功能</p><h2 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h2><div class="language-kts line-numbers-mode" data-ext="kts"><pre class="language-kts"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;cn.qhplus.emo:network&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="网络状态-1" tabindex="-1"><a class="header-anchor" href="#网络状态-1" aria-hidden="true">#</a> 网络状态</h2><ol><li>获取当前网络状态</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> state <span class="token operator">=</span> NetworkConnectivity<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNetworkState</span><span class="token punctuation">(</span><span class="token comment">/*forceRefresh*/</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>监听网络状态</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>NetworkConnectivity<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>stateFlow<span class="token punctuation">.</span><span class="token function">collectLatest</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 网络状态</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的 <code>NetworkState</code> 的完整定义为</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">NetworkState</span><span class="token punctuation">(</span>
    <span class="token keyword">val</span> networkType<span class="token operator">:</span> NetworkType<span class="token punctuation">,</span> <span class="token comment">// none, 流量, Wifi, Fake, Unknown</span>
    <span class="token keyword">val</span> isValid<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// 是否是有效连接</span>
    <span class="token keyword">val</span> uuid<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">val</span> updateTime<span class="token operator">:</span> Long
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有两个疑问：</p><ol><li>为何会存在 <code>isValid</code>？这个其实是为了处理网络连接了，但是网络实际不可用的情况。可惜的是国内目前很多这个值不可信任。</li><li>为何会存在 <code>Fake</code> 状态？这个我一直觉得是华为手机的 Bug，当使用 <code>ConnectivityCallback</code> 时，手机退到后台一会儿返回到前台，华为会返回个无网络的状态，然而实际上是没问题的，要过一段时间强刷一次才行。</li></ol><p>所以 <code>emo</code> 提供了 <code>fakeToConnectedAndRecheckAfter</code> 方法，可以在华为手机每次进入前台时有开发者主动调用一下。<code>emo</code> 不会自动去做这个事情，因为判断华为需要用到 Build 里的某些字段，现在的审核，会有频率限制，所以 <code>emo</code> 会避免这些事情。</p><h2 id="网络流量监控" tabindex="-1"><a class="header-anchor" href="#网络流量监控" aria-hidden="true">#</a> 网络流量监控</h2><ol><li>监控的开始与暂停</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 开始</span>
NetworkBandwidthSampler<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startSampling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 停止</span>
NetworkBandwidthSampler<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stopSampling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>监听流量变化</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NetworkBandwidthSampler.of(context).streamTotalFlow.collectLatest {
    // it.down 下行流量总量
    // it.up 上行流量的总量
    // it.timestamp 时间戳，使用者可以用它来监听一段时间的流量消耗情况
}

NetworkBandwidthSampler.of(context).bandwidthFlow.collectLatest {
    // it.down 下行速度 kbps
    // it.up 上行速度 kbps
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：这里的监控是基于使用网络流量的统计监控，并不代表当前的网络环境。这个监控主要是监控网络流量使用情况，防止巨额流量的产生。</p></blockquote>`,20),i=[o];function c(l,p){return a(),s("div",null,i)}const u=n(t,[["render",c],["__file","network.html.vue"]]);export{u as default};
